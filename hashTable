import math
import random


class hashTable:
    def __init__(self, minLoad, maxLoad, size, hashType='divHash', collisionHandler='separateChaining', prime1=193,
                 prime2=1543, prime3=6151, doubleHashType='multHash'):
        self.m = size
        self.n = 0
        self.data = [None] * self.m
        self.allEntries = []
        self.minLoad = minLoad
        self.maxLoad = maxLoad
        self.idealLoad = (self.minLoad + self.maxLoad) / 2
        self.currentLoad = self.n / self.m
        self.hashType = hashType
        self.collisionHandler = collisionHandler
        self.a = prime1
        self.p = prime2
        self.b = prime3
        self.doubleHashType = doubleHashType
        if self.hashType == 'uniHash':
            self.a = random.randint(1, self.p - 1)
            self.b = random.randint(0, self.p - 1)

    def divHash(self, x):
        return x % self.m

    def multHash(self, x):
        return ((self.a * x) % self.p) % self.m

    def linHash(self, x):
        return ((self.a * x + self.b) % self.p) % self.m

    def poliHash(self, x):
        p = 37
        hashValue = 0
        for i in range(len(x)):
            hashValue = hashValue * p + ord(x[i])
        return hashValue % self.m

    def uniHash(self, x):
        return ((self.a * x + self.b) % self.p) % self.m

    def chosenHash(self, x):
        if self.hashType == 'divHash':
            return self.divHash(x)
        elif self.hashType == 'multHash':
            return self.multHash(x)
        elif self.hashType == 'linHash':
            return self.linHash(x)
        elif self.hashType == 'poliHash':
            return self.poliHash(x)
        elif self.hashType == 'uniHash':
            return self.uniHash(x)

    def doubleHash(self, x):
        if self.doubleHashType == 'divHash':
            return self.divHash(x)
        elif self.doubleHashType == 'multHash':
            return self.multHash(x)
        elif self.doubleHashType == 'linHash':
            return self.linHash(x)
        elif self.doubleHashType == 'poliHash':
            return self.poliHash(x)
        elif self.doubleHashType == 'uniHash':
            return self.uniHash(x)

    def chainInsert(self, x, v):
        i = self.chosenHash(x)
        self.allEntries.append((x, v))
        if self.data[i] is not None:
            self.data[i].append((x, v, self.data[i][-1][2] + 1))
        else:
            self.data[i] = [(x, v, 1)]
        self.n += 1
        self.currentLoad = self.n / self.m
        if self.currentLoad > self.maxLoad:
            newSize = math.ceil(self.n/ self.idealLoad)
            newTable = hashTable(self.minLoad, self.maxLoad,newSize, 'uniHash', self.collisionHandler,
                                 self.p, self.a, self.b)
            for entry in self.allEntries:
                newTable.insert(entry[0], entry[1])
            return newTable
        else:
            return self

    def linprobInsert(self, x, v):
        i = self.chosenHash(x)
        if self.data[i] is not None:
            for j in range(self.m):
                if self.data[(i + j) % self.m] is None:
                    self.data[(i + j) % self.m] = (x, v)
                    return self
            raise Exception('Full table')
        else:
            self.data[i] = (x, v)
            return self

    def doubleInsert(self, x, v):
        i = self.chosenHash(x)
        if self.data[i] is not None:
            cont = 0
            while cont < self.m:
                i2 = (i + cont * self.doubleHash(i)) % self.m
                if self.data[i2] is None:
                    self.data[i2] = (x, v)
                    return self
                else:
                    cont += 1
            raise Exception('Full table')

        else:
            self.data[i] = (x, v)
            return self

    def chosenInsert(self, x, v):
        if self.collisionHandler == 'separateChaining':
            return self.chainInsert(x, v)
        elif self.collisionHandler == 'linearProbing':
            return self.linprobInsert(x, v)
        elif self.collisionHandler == 'doubleHashing':
            return self.doubleInsert(x, v)

    def insert(self, x, v):
        return self.chosenInsert(x, v)

    def chainFind(self, x):
        i = self.chosenHash(x)
        if self.data[i] is None:
            return False
        else:
            for item in self.data[i]:
                if item[0] == x:
                    return True
        return False

    def doubleFind(self, x):
        i = self.chosenHash(x)
        if self.data[i] is None:
            return False
        elif self.data[i][0] == x:
            return True
        else:
            cont = 0
            while cont < self.m:
                i2 = (i + cont * self.doubleHash(i)) % self.m
                if self.data[i2] is None:
                    return False
                elif self.data[i2][0] == x:
                    return True
                else:
                    cont += 1
            return False

    def linprobFind(self, x):
        i = self.chosenHash(x)
        if self.data[i] is None:
            return False
        elif self.data[i][0] == x:
            return True
        else:
            for j in range(self.m):
                if self.data[(i + j) % self.m] is None:
                    return False
                elif self.data[(i + j) % self.m][0] == x:
                    return True
            return False

    def chosenFind(self, x):
        if self.collisionHandler == 'separateChaining':
            return self.chainFind(x)
        elif self.collisionHandler == 'linearProbing':
            return self.linprobFind(x)
        elif self.collisionHandler == 'doubleHashing':
            return self.doubleFind(x)

    def find(self, x):
        return self.chosenFind(x)
